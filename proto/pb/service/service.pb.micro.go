// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/service.proto

package services

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/common"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelloWorldService service

func NewHelloWorldServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelloWorldService service

type HelloWorldService interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error)
	HelloWorld2(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error)
}

type helloWorldService struct {
	c    client.Client
	name string
}

func NewHelloWorldService(name string, c client.Client) HelloWorldService {
	return &helloWorldService{
		c:    c,
		name: name,
	}
}

func (c *helloWorldService) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error) {
	req := c.c.NewRequest(c.name, "HelloWorldService.HelloWorld", in)
	out := new(HelloWorldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldService) HelloWorld2(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error) {
	req := c.c.NewRequest(c.name, "HelloWorldService.HelloWorld2", in)
	out := new(HelloWorldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloWorldService service

type HelloWorldServiceHandler interface {
	HelloWorld(context.Context, *HelloWorldRequest, *HelloWorldResponse) error
	HelloWorld2(context.Context, *HelloWorldRequest, *HelloWorldResponse) error
}

func RegisterHelloWorldServiceHandler(s server.Server, hdlr HelloWorldServiceHandler, opts ...server.HandlerOption) error {
	type helloWorldService interface {
		HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error
		HelloWorld2(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error
	}
	type HelloWorldService struct {
		helloWorldService
	}
	h := &helloWorldServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloWorldService{h}, opts...))
}

type helloWorldServiceHandler struct {
	HelloWorldServiceHandler
}

func (h *helloWorldServiceHandler) HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error {
	return h.HelloWorldServiceHandler.HelloWorld(ctx, in, out)
}

func (h *helloWorldServiceHandler) HelloWorld2(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error {
	return h.HelloWorldServiceHandler.HelloWorld2(ctx, in, out)
}
