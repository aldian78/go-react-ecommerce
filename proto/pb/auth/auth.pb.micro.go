// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth/auth.proto

package services

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/common"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ChangePasswordResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ChangePasswordResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ChangePassword", in)
	out := new(ChangePasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.GetProfile", in)
	out := new(GetProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	ChangePassword(context.Context, *ChangePasswordRequest, *ChangePasswordResponse) error
	GetProfile(context.Context, *GetProfileRequest, *GetProfileResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *ChangePasswordResponse) error
		GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.AuthServiceHandler.Register(ctx, in, out)
}

func (h *authServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthServiceHandler.Login(ctx, in, out)
}

func (h *authServiceHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.AuthServiceHandler.Logout(ctx, in, out)
}

func (h *authServiceHandler) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *ChangePasswordResponse) error {
	return h.AuthServiceHandler.ChangePassword(ctx, in, out)
}

func (h *authServiceHandler) GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error {
	return h.AuthServiceHandler.GetProfile(ctx, in, out)
}
