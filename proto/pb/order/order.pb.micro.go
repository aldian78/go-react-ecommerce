// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order/order.proto

package order

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/common"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error)
	ListOrderAdmin(ctx context.Context, in *ListOrderAdminRequest, opts ...client.CallOption) (*ListOrderAdminResponse, error)
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...client.CallOption) (*ListOrderResponse, error)
	DetailOrder(ctx context.Context, in *DetailOrderRequest, opts ...client.CallOption) (*DetailOrderResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...client.CallOption) (*UpdateOrderStatusResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CreateOrder", in)
	out := new(CreateOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ListOrderAdmin(ctx context.Context, in *ListOrderAdminRequest, opts ...client.CallOption) (*ListOrderAdminResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ListOrderAdmin", in)
	out := new(ListOrderAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...client.CallOption) (*ListOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ListOrder", in)
	out := new(ListOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) DetailOrder(ctx context.Context, in *DetailOrderRequest, opts ...client.CallOption) (*DetailOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.DetailOrder", in)
	out := new(DetailOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...client.CallOption) (*UpdateOrderStatusResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.UpdateOrderStatus", in)
	out := new(UpdateOrderStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	CreateOrder(context.Context, *CreateOrderRequest, *CreateOrderResponse) error
	ListOrderAdmin(context.Context, *ListOrderAdminRequest, *ListOrderAdminResponse) error
	ListOrder(context.Context, *ListOrderRequest, *ListOrderResponse) error
	DetailOrder(context.Context, *DetailOrderRequest, *DetailOrderResponse) error
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest, *UpdateOrderStatusResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error
		ListOrderAdmin(ctx context.Context, in *ListOrderAdminRequest, out *ListOrderAdminResponse) error
		ListOrder(ctx context.Context, in *ListOrderRequest, out *ListOrderResponse) error
		DetailOrder(ctx context.Context, in *DetailOrderRequest, out *DetailOrderResponse) error
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, out *UpdateOrderStatusResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) CreateOrder(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error {
	return h.OrderServiceHandler.CreateOrder(ctx, in, out)
}

func (h *orderServiceHandler) ListOrderAdmin(ctx context.Context, in *ListOrderAdminRequest, out *ListOrderAdminResponse) error {
	return h.OrderServiceHandler.ListOrderAdmin(ctx, in, out)
}

func (h *orderServiceHandler) ListOrder(ctx context.Context, in *ListOrderRequest, out *ListOrderResponse) error {
	return h.OrderServiceHandler.ListOrder(ctx, in, out)
}

func (h *orderServiceHandler) DetailOrder(ctx context.Context, in *DetailOrderRequest, out *DetailOrderResponse) error {
	return h.OrderServiceHandler.DetailOrder(ctx, in, out)
}

func (h *orderServiceHandler) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, out *UpdateOrderStatusResponse) error {
	return h.OrderServiceHandler.UpdateOrderStatus(ctx, in, out)
}
