// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cart/cart.proto

package cart

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	api1 "github.com/aldian78/go-react-ecommerce/proto/pb/api"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/basecommon"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	AddProductToCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	ListCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	DeleteCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	UpdateCartQuantity(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) AddProductToCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "CartService.AddProductToCart", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) ListCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "CartService.ListCart", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DeleteCart(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "CartService.DeleteCart", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) UpdateCartQuantity(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "CartService.UpdateCartQuantity", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	AddProductToCart(context.Context, *api1.APIREQ, *api1.APIRES) error
	ListCart(context.Context, *api1.APIREQ, *api1.APIRES) error
	DeleteCart(context.Context, *api1.APIREQ, *api1.APIRES) error
	UpdateCartQuantity(context.Context, *api1.APIREQ, *api1.APIRES) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		AddProductToCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		ListCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		DeleteCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		UpdateCartQuantity(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) AddProductToCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.CartServiceHandler.AddProductToCart(ctx, in, out)
}

func (h *cartServiceHandler) ListCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.CartServiceHandler.ListCart(ctx, in, out)
}

func (h *cartServiceHandler) DeleteCart(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.CartServiceHandler.DeleteCart(ctx, in, out)
}

func (h *cartServiceHandler) UpdateCartQuantity(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.CartServiceHandler.UpdateCartQuantity(ctx, in, out)
}
