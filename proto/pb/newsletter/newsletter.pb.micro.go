// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: newsletter/newsletter.proto

package newsletter

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	api1 "github.com/aldian78/go-react-ecommerce/proto/pb/api"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/basecommon"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NewsletterService service

func NewNewsletterServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NewsletterService service

type NewsletterService interface {
	SubscribeNewsletter(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
}

type newsletterService struct {
	c    client.Client
	name string
}

func NewNewsletterService(name string, c client.Client) NewsletterService {
	return &newsletterService{
		c:    c,
		name: name,
	}
}

func (c *newsletterService) SubscribeNewsletter(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "NewsletterService.SubscribeNewsletter", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NewsletterService service

type NewsletterServiceHandler interface {
	SubscribeNewsletter(context.Context, *api1.APIREQ, *api1.APIRES) error
}

func RegisterNewsletterServiceHandler(s server.Server, hdlr NewsletterServiceHandler, opts ...server.HandlerOption) error {
	type newsletterService interface {
		SubscribeNewsletter(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
	}
	type NewsletterService struct {
		newsletterService
	}
	h := &newsletterServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NewsletterService{h}, opts...))
}

type newsletterServiceHandler struct {
	NewsletterServiceHandler
}

func (h *newsletterServiceHandler) SubscribeNewsletter(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.NewsletterServiceHandler.SubscribeNewsletter(ctx, in, out)
}
