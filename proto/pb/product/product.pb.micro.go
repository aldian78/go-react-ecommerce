// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product/product.proto

package product

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	api1 "github.com/aldian78/go-react-ecommerce/proto/pb/api"
	_ "github.com/aldian78/go-react-ecommerce/proto/pb/basecommon"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProductService service

func NewProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProductService service

type ProductService interface {
	CreateProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	DetailProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	EditProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	DeleteProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	ListProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	ListProductAdmin(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	HighlightProducts(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	GetFileName(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	UploadProductImage(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) CreateProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.CreateProduct", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DetailProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.DetailProduct", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) EditProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.EditProduct", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DeleteProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.DeleteProduct", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ListProduct(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.ListProduct", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ListProductAdmin(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.ListProductAdmin", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) HighlightProducts(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.HighlightProducts", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetFileName(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetFileName", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UploadProductImage(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "ProductService.UploadProductImage", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	CreateProduct(context.Context, *api1.APIREQ, *api1.APIRES) error
	DetailProduct(context.Context, *api1.APIREQ, *api1.APIRES) error
	EditProduct(context.Context, *api1.APIREQ, *api1.APIRES) error
	DeleteProduct(context.Context, *api1.APIREQ, *api1.APIRES) error
	ListProduct(context.Context, *api1.APIREQ, *api1.APIRES) error
	ListProductAdmin(context.Context, *api1.APIREQ, *api1.APIRES) error
	HighlightProducts(context.Context, *api1.APIREQ, *api1.APIRES) error
	GetFileName(context.Context, *api1.APIREQ, *api1.APIRES) error
	UploadProductImage(context.Context, *api1.APIREQ, *api1.APIRES) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		CreateProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		DetailProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		EditProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		DeleteProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		ListProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		ListProductAdmin(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		HighlightProducts(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		GetFileName(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		UploadProductImage(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) CreateProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.CreateProduct(ctx, in, out)
}

func (h *productServiceHandler) DetailProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.DetailProduct(ctx, in, out)
}

func (h *productServiceHandler) EditProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.EditProduct(ctx, in, out)
}

func (h *productServiceHandler) DeleteProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.DeleteProduct(ctx, in, out)
}

func (h *productServiceHandler) ListProduct(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.ListProduct(ctx, in, out)
}

func (h *productServiceHandler) ListProductAdmin(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.ListProductAdmin(ctx, in, out)
}

func (h *productServiceHandler) HighlightProducts(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.HighlightProducts(ctx, in, out)
}

func (h *productServiceHandler) GetFileName(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.GetFileName(ctx, in, out)
}

func (h *productServiceHandler) UploadProductImage(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.ProductServiceHandler.UploadProductImage(ctx, in, out)
}
