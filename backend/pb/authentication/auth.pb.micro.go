// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authentication/auth.proto

package authentication

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	fmt "fmt"
	api1 "go-grpc-ecommerce-be/pb/api"
	_ "go-grpc-ecommerce-be/pb/common"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthenticationService service

func NewAuthenticationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthenticationService service

type AuthenticationService interface {
	RegisterHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	LoginHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	LogoutHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	ChangePasswordHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
	GetProfileHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error)
}

type authenticationService struct {
	c    client.Client
	name string
}

func NewAuthenticationService(name string, c client.Client) AuthenticationService {
	return &authenticationService{
		c:    c,
		name: name,
	}
}

func (c *authenticationService) RegisterHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.RegisterHandler", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) LoginHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.LoginHandler", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) LogoutHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.LogoutHandler", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) ChangePasswordHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.ChangePasswordHandler", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) GetProfileHandler(ctx context.Context, in *api1.APIREQ, opts ...client.CallOption) (*api1.APIRES, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.GetProfileHandler", in)
	out := new(api1.APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationService service

type AuthenticationServiceHandler interface {
	RegisterHandler(context.Context, *api1.APIREQ, *api1.APIRES) error
	LoginHandler(context.Context, *api1.APIREQ, *api1.APIRES) error
	LogoutHandler(context.Context, *api1.APIREQ, *api1.APIRES) error
	ChangePasswordHandler(context.Context, *api1.APIREQ, *api1.APIRES) error
	GetProfileHandler(context.Context, *api1.APIREQ, *api1.APIRES) error
}

func RegisterAuthenticationServiceHandler(s server.Server, hdlr AuthenticationServiceHandler, opts ...server.HandlerOption) error {
	type authenticationService interface {
		RegisterHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		LoginHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		LogoutHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		ChangePasswordHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
		GetProfileHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error
	}
	type AuthenticationService struct {
		authenticationService
	}
	h := &authenticationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthenticationService{h}, opts...))
}

type authenticationServiceHandler struct {
	AuthenticationServiceHandler
}

func (h *authenticationServiceHandler) RegisterHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.AuthenticationServiceHandler.RegisterHandler(ctx, in, out)
}

func (h *authenticationServiceHandler) LoginHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.AuthenticationServiceHandler.LoginHandler(ctx, in, out)
}

func (h *authenticationServiceHandler) LogoutHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.AuthenticationServiceHandler.LogoutHandler(ctx, in, out)
}

func (h *authenticationServiceHandler) ChangePasswordHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.AuthenticationServiceHandler.ChangePasswordHandler(ctx, in, out)
}

func (h *authenticationServiceHandler) GetProfileHandler(ctx context.Context, in *api1.APIREQ, out *api1.APIRES) error {
	return h.AuthenticationServiceHandler.GetProfileHandler(ctx, in, out)
}
