// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package newsletter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsletterServiceClient is the client API for NewsletterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsletterServiceClient interface {
	SubscribeNewsletter(ctx context.Context, in *SubcribeNewsletterRequest, opts ...grpc.CallOption) (*SubcribeNewsletterResponse, error)
}

type newsletterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsletterServiceClient(cc grpc.ClientConnInterface) NewsletterServiceClient {
	return &newsletterServiceClient{cc}
}

func (c *newsletterServiceClient) SubscribeNewsletter(ctx context.Context, in *SubcribeNewsletterRequest, opts ...grpc.CallOption) (*SubcribeNewsletterResponse, error) {
	out := new(SubcribeNewsletterResponse)
	err := c.cc.Invoke(ctx, "/newsletter.NewsletterService/SubscribeNewsletter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsletterServiceServer is the server API for NewsletterService service.
// All implementations must embed UnimplementedNewsletterServiceServer
// for forward compatibility
type NewsletterServiceServer interface {
	SubscribeNewsletter(context.Context, *SubcribeNewsletterRequest) (*SubcribeNewsletterResponse, error)
	mustEmbedUnimplementedNewsletterServiceServer()
}

// UnimplementedNewsletterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewsletterServiceServer struct {
}

func (UnimplementedNewsletterServiceServer) SubscribeNewsletter(context.Context, *SubcribeNewsletterRequest) (*SubcribeNewsletterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeNewsletter not implemented")
}
func (UnimplementedNewsletterServiceServer) mustEmbedUnimplementedNewsletterServiceServer() {}

// UnsafeNewsletterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsletterServiceServer will
// result in compilation errors.
type UnsafeNewsletterServiceServer interface {
	mustEmbedUnimplementedNewsletterServiceServer()
}

func RegisterNewsletterServiceServer(s grpc.ServiceRegistrar, srv NewsletterServiceServer) {
	s.RegisterService(&NewsletterService_ServiceDesc, srv)
}

func _NewsletterService_SubscribeNewsletter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubcribeNewsletterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).SubscribeNewsletter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsletter.NewsletterService/SubscribeNewsletter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).SubscribeNewsletter(ctx, req.(*SubcribeNewsletterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsletterService_ServiceDesc is the grpc.ServiceDesc for NewsletterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsletterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newsletter.NewsletterService",
	HandlerType: (*NewsletterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeNewsletter",
			Handler:    _NewsletterService_SubscribeNewsletter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newsletter/newsletter.proto",
}
